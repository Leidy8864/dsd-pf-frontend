{"ast":null,"code":"import { EventEmitter, forwardRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nexport let EinputComponent = /*#__PURE__*/(() => {\n  class EinputComponent {\n    constructor() {\n      //PROPERTIES\n      this.desc = '';\n      this.type = 'text';\n      this.placeholder = ''; //EVENTS\n\n      this.ekeypress = new EventEmitter();\n      this.ekeyup = new EventEmitter();\n      this.echange = new EventEmitter();\n      this.value = '';\n      this.isNumber = false;\n\n      this.onChange = _ => {};\n\n      this.onTouched = () => {};\n    }\n\n    get getType() {\n      if (this.type == 'number' || this.type == 'decimal') {\n        this.isNumber = true;\n        return 'text';\n      }\n\n      return this.type;\n    }\n\n    keyUpEvent(event) {\n      this.ekeyup.emit(event);\n    }\n\n    keyPressEvent(event) {\n      if (this.isNumber && !this.numberValidation(event.key)) event.preventDefault();\n    }\n\n    pasteEvent(event) {\n      if (this.isNumber && !this.numberValidation(event.clipboardData.getData('text'))) event.preventDefault();\n    }\n\n    numberValidation(text) {\n      if (text == '') return false;\n\n      switch (this.type.toLowerCase()) {\n        case 'number':\n          if (!/^\\d*$/.test(text)) return false;\n          break;\n\n        case 'decimal':\n          if (!/^\\d*$/.test(text)) return false;\n          break;\n      }\n\n      return true;\n    }\n\n    updateChanges(value) {\n      this.echange.emit(value);\n      this.onChange(this.value);\n    }\n\n    writeValue(value) {\n      this.value = value;\n      this.updateChanges(value);\n    }\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    ngOnInit() {}\n\n  }\n\n  EinputComponent.ɵfac = function EinputComponent_Factory(t) {\n    return new (t || EinputComponent)();\n  };\n\n  EinputComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: EinputComponent,\n    selectors: [[\"e-input\"]],\n    inputs: {\n      desc: \"desc\",\n      type: \"type\",\n      placeholder: \"placeholder\"\n    },\n    outputs: {\n      ekeypress: \"ekeypress\",\n      ekeyup: \"ekeyup\",\n      echange: \"echange\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => EinputComponent),\n      multi: true\n    }])],\n    decls: 3,\n    vars: 4,\n    consts: [[3, \"type\", \"ngModel\", \"placeholder\", \"ngModelChange\", \"keypress\", \"keyup\", \"paste\"]],\n    template: function EinputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"span\");\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"input\", 0);\n        i0.ɵɵlistener(\"ngModelChange\", function EinputComponent_Template_input_ngModelChange_2_listener($event) {\n          return ctx.value = $event;\n        })(\"keypress\", function EinputComponent_Template_input_keypress_2_listener($event) {\n          return ctx.keyPressEvent($event);\n        })(\"keyup\", function EinputComponent_Template_input_keyup_2_listener($event) {\n          return ctx.keyUpEvent($event);\n        })(\"paste\", function EinputComponent_Template_input_paste_2_listener($event) {\n          return ctx.pasteEvent($event);\n        })(\"ngModelChange\", function EinputComponent_Template_input_ngModelChange_2_listener($event) {\n          return ctx.updateChanges($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.desc);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"type\", ctx.getType)(\"ngModel\", ctx.value)(\"placeholder\", ctx.placeholder);\n      }\n    },\n    directives: [i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgModel],\n    styles: [\"[_nghost-%COMP%]{position:relative;display:grid;border-radius:.25rem;overflow:hidden}[_nghost-%COMP%]   span[_ngcontent-%COMP%]{padding:0;position:absolute;-webkit-user-select:none;user-select:none;font-size:.7rem;left:.5rem;color:#0091ff}[_nghost-%COMP%]   input[_ngcontent-%COMP%]{background-color:#e6f4ff;height:2.5rem;font-size:.9rem;width:100%;padding:1rem .5rem .5rem;border:none;color:#4a5863}[_nghost-%COMP%]   input[_ngcontent-%COMP%]::placeholder{color:#78add6;opacity:1}[_nghost-%COMP%]:before{content:\\\"\\\";position:absolute;display:block;bottom:0;width:0;transition:width .5s;border-bottom:solid .15rem #0091ff}[_nghost-%COMP%]:focus-within:before{width:100%}\"]\n  });\n  return EinputComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}