{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { Cliente } from 'src/app/shared/models/cliente';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/http/cliente.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../../../shared/components/buttons/ebutton/ebutton.component\";\n\nfunction ClienteFormComponent_form_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 1);\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵtext(2, \"Cliente\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"einput\", 3);\n    i0.ɵɵelement(4, \"einput\", 4);\n    i0.ɵɵelement(5, \"einput\", 5);\n    i0.ɵɵelementStart(6, \"div\", 6);\n    i0.ɵɵelementStart(7, \"ebutton\", 7);\n    i0.ɵɵlistener(\"click\", function ClienteFormComponent_form_0_Template_ebutton_click_7_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.save();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"ebutton\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.formGroup);\n  }\n}\n\nexport let ClienteFormComponent = /*#__PURE__*/(() => {\n  class ClienteFormComponent {\n    constructor(clienteService, formBuilder, activatedRoute, router) {\n      this.clienteService = clienteService;\n      this.formBuilder = formBuilder;\n      this.activatedRoute = activatedRoute;\n      this.router = router;\n      this.load();\n    }\n\n    load() {\n      let cliente = this.activatedRoute.snapshot.data['cliente'];\n      this.buildForm(cliente ? cliente : new Cliente());\n    }\n\n    buildForm(cliente) {\n      this.formGroup = this.formBuilder.group({\n        id: [cliente.id, Validators.required],\n        nombre: [cliente.nombre, Validators.required],\n        descripcion: [cliente.descripcion, Validators.required]\n      });\n    }\n\n    save() {\n      this.clienteService.save(this.formGroup.value).subscribe(data => {\n        console.log(data);\n        this.router.navigate(['admin/cliente']);\n      });\n    }\n\n    ngOnInit() {}\n\n  }\n\n  ClienteFormComponent.ɵfac = function ClienteFormComponent_Factory(t) {\n    return new (t || ClienteFormComponent)(i0.ɵɵdirectiveInject(i1.ClienteService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  ClienteFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ClienteFormComponent,\n    selectors: [[\"app-cliente-form\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"form\", \"novalidate\", \"\", 3, \"formGroup\", 4, \"ngIf\"], [\"novalidate\", \"\", 1, \"form\", 3, \"formGroup\"], [1, \"title-l\"], [\"desc\", \"Id\", \"formControlName\", \"id\"], [\"desc\", \"Nombre\", \"formControlName\", \"nombre\"], [\"desc\", \"Descripcion\", \"formControlName\", \"descripcion\"], [1, \"actions\"], [\"desc\", \"Aceptar\", 3, \"click\"], [\"desc\", \"Cancelar\"]],\n    template: function ClienteFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ClienteFormComponent_form_0_Template, 9, 1, \"form\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.formGroup);\n      }\n    },\n    directives: [i4.NgIf, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.NgControlStatus, i2.FormControlName, i5.EbuttonComponent],\n    styles: [\"\"]\n  });\n  return ClienteFormComponent;\n})();\nexport let ClienteFormResolve = /*#__PURE__*/(() => {\n  class ClienteFormResolve {\n    constructor(clienteService) {\n      this.clienteService = clienteService;\n    }\n\n    resolve(route, state) {\n      let id = Number(route.paramMap.get('id'));\n      return id ? this.clienteService.findById(id) : new Cliente();\n    }\n\n  }\n\n  ClienteFormResolve.ɵfac = function ClienteFormResolve_Factory(t) {\n    return new (t || ClienteFormResolve)(i0.ɵɵinject(i1.ClienteService));\n  };\n\n  ClienteFormResolve.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClienteFormResolve,\n    factory: ClienteFormResolve.ɵfac\n  });\n  return ClienteFormResolve;\n})();","map":null,"metadata":{},"sourceType":"module"}