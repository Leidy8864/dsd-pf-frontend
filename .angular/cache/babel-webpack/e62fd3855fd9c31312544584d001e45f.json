{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { Sucursal } from 'src/app/shared/models/sucursal';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/http/sucursal.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../../../shared/components/inputs/einput/einput.component\";\nimport * as i6 from \"../../../../shared/components/buttons/ebutton/ebutton.component\";\n\nfunction SucursalFormComponent_form_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"form\", 1);\n    i0.ɵɵelementStart(1, \"div\", 2);\n    i0.ɵɵtext(2, \"Sucursal\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"e-input\", 3);\n    i0.ɵɵelement(4, \"e-input\", 4);\n    i0.ɵɵelement(5, \"e-input\", 5);\n    i0.ɵɵelementStart(6, \"div\", 6);\n    i0.ɵɵelementStart(7, \"e-button\", 7);\n    i0.ɵɵlistener(\"click\", function SucursalFormComponent_form_0_Template_e_button_click_7_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.save();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"e-button\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.formGroup);\n  }\n}\n\nexport let SucursalFormComponent = /*#__PURE__*/(() => {\n  class SucursalFormComponent {\n    constructor(sucursalService, formBuilder, activatedRoute, router) {\n      this.sucursalService = sucursalService;\n      this.formBuilder = formBuilder;\n      this.activatedRoute = activatedRoute;\n      this.router = router;\n      this.load();\n    }\n\n    load() {\n      let sucursal = this.activatedRoute.snapshot.data['sucursal'];\n      this.buildForm(sucursal ? sucursal : new Sucursal());\n    }\n\n    buildForm(sucursal) {\n      this.formGroup = this.formBuilder.group({\n        id: [sucursal.id, Validators.required],\n        nombre: [sucursal.nombre, Validators.required],\n        direccion: [sucursal.direccion, Validators.required],\n        distrito: [sucursal.distrito, Validators.required]\n      });\n    }\n\n    save() {\n      this.sucursalService.save(this.formGroup.value).subscribe(data => {\n        this.router.navigate(['admin/sucursal']);\n      });\n    }\n\n    ngOnInit() {}\n\n  }\n\n  SucursalFormComponent.ɵfac = function SucursalFormComponent_Factory(t) {\n    return new (t || SucursalFormComponent)(i0.ɵɵdirectiveInject(i1.SucursalService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  SucursalFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SucursalFormComponent,\n    selectors: [[\"app-sucursal-form\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"form\", \"novalidate\", \"\", 3, \"formGroup\", 4, \"ngIf\"], [\"novalidate\", \"\", 1, \"form\", 3, \"formGroup\"], [1, \"title-l\"], [\"desc\", \"Nombre\", \"formControlName\", \"nombre\"], [\"desc\", \"Direccion\", \"formControlName\", \"direccion\"], [\"desc\", \"Distrito\", \"formControlName\", \"distrito\"], [1, \"actions-r\"], [\"desc\", \"Aceptar\", 3, \"click\"], [\"desc\", \"Cancelar\", \"routerLink\", \"/admin/sucursal\"]],\n    template: function SucursalFormComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, SucursalFormComponent_form_0_Template, 9, 1, \"form\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.formGroup);\n      }\n    },\n    directives: [i4.NgIf, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i5.EinputComponent, i2.NgControlStatus, i2.FormControlName, i6.EbuttonComponent, i3.RouterLink],\n    styles: [\"\"]\n  });\n  return SucursalFormComponent;\n})();\nexport let SucursalFormResolve = /*#__PURE__*/(() => {\n  class SucursalFormResolve {\n    constructor(sucursalService) {\n      this.sucursalService = sucursalService;\n    }\n\n    resolve(route, state) {\n      let id = Number(route.paramMap.get('id'));\n      return id ? this.sucursalService.findById(id) : new Sucursal();\n    }\n\n  }\n\n  SucursalFormResolve.ɵfac = function SucursalFormResolve_Factory(t) {\n    return new (t || SucursalFormResolve)(i0.ɵɵinject(i1.SucursalService));\n  };\n\n  SucursalFormResolve.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SucursalFormResolve,\n    factory: SucursalFormResolve.ɵfac\n  });\n  return SucursalFormResolve;\n})();","map":null,"metadata":{},"sourceType":"module"}